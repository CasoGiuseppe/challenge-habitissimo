//- CUSTOM FUNTIONS:
//- convert px to rem
$browser-context: 16;
@function px2rem($pixels, $context: $browser-context) {
  @return ($pixels / $context) * 1rem;
}

//- CUSTOM MIXINS:
//- UI elements
@mixin UI-isValid {
  background: $c-valid url('~@/assets/images/svg/check.svg');
  background-position: center;
  background-repeat: no-repeat;
  background-size: 50% auto;
}

@mixin UI-isInvalid {
  background: $c-warning url('~@/assets/images/svg/error.svg');
  background-position: center;
  background-repeat: no-repeat;
  background-size: 50% auto;
}

//- typography mixins
@mixin text--light {
  font-family: $Quicksand, sans-serif;
  font-weight: $light;
}

@mixin text--regular {
  font-family: $Quicksand, sans-serif;
  font-weight: $regular;
}

@mixin text--bold {
  font-family: $Quicksand, sans-serif;
  font-weight: $bold;
}

@mixin text--xsmall {
  font-size: px2rem(12);
}

@mixin text--xxsmall {
  font-size: px2rem(10);
}



//- animations
@mixin moveUp {
  .change-move-leave,
  .change-move-enter-to {
    opacity: 1;
    transform: translateY(-50%) translateX(-50%)
  }

  .change-move-leave-active,
  .change-move-enter-active {
    transition: transform .4s $a-ease-out,
                opacity .4s $a-ease-out;
  }

  .change-move-leave-active {
    transition-duration: .2s;
    transition-timing-function: $a-ease-in
  }

  .change-move-leave-to {
    opacity: 0;
    transform: translateY(-25%) translateX(-50%);
  }

  .change-move-enter {
    opacity: 0;
    transform: translateY(100%) translateX(-50%)
  }
}

@mixin moveValidationUI {
  .change-validation-leave,
  .change-validation-enter-to {
    opacity: 1;
    transform: translateX(-100%) translateX(#{$base * -1 + 'px'})
  }

  .change-validation-leave-active,
  .change-validation-enter-active {
    transition: transform .4s $a-elastic,
                opacity .4s $a-ease-out,
                background .4s $a-ease-out;
  }

  .change-validation-leave-active {
    transition-duration: .4s;
    transition-timing-function: $a-ease-out
  }

  .change-validation-leave-to {
    opacity: 0;
    transform: translateX(-100%) translateX(#{($base * 2) * -1 + 'px'});
  }

  .change-validation-enter {
    opacity: 0;
    transform: translateX(0)
  }
}

//- create media queries for columns use
@mixin build-mq($breakpoint, $min-or-max) {
  @if($breakpoint == 0) {
    @content;
  } @else {
    @media screen and (#{$min-or-max}-width: $breakpoint *1px) {
      @content;
    }
  }
}

//- grid create column class
@mixin build-col-classes($modifier, $grid-cols, $breakpoint) {
  @include build-mq($breakpoint, 'min') {
    &__col#{$modifier}-offset-0 {
      margin-left: 0;
    }
    @for $i from 1 through $grid-cols {
      &__col#{$modifier}-#{$i} {
        @if $i != 12 {
          flex: 0 0 calc((100 / #{$grid-cols / $i} * 1%) - #{(($base * 3) / 2) + 'px'});
          @media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) {  
            flex-basis: calc((100% / #{$grid-cols / $i}) - #{(($base * 3) / 2) + 'px'});
         }
        } @else {
          flex: 0 0 calc((100 / #{$grid-cols / $i} * 1%));
          @media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) {  
            flex-basis: calc((100% / #{$grid-cols / $i}));
         }
        }
      }

      &__col#{$modifier}-offset-right-#{$i} {
        margin-right: (100 / ($grid-cols / $i) ) * 1%;
      }

      &__col#{$modifier}-offset-left-#{$i} {
        margin-left: (100 / ($grid-cols / $i) ) * 1%;
      }
    }
  }
}

@each $modifier , $breakpoint in $map-grid-props {
  @if($modifier == '') {
    $modifier: '-xs';
  }
  @include build-mq($breakpoint - 1, 'max') {
    .hidden#{$modifier}-down {
      display: none !important;
    }
  }
  @include build-mq($breakpoint, 'min') {
    .hidden#{$modifier}-up {
      display: none !important;
    }
  }
}

//- generate breakpoints
//- @param breakpoint {string} :
//- only-phone = from 0 to 576 {mobile}
//- tablet-pt = from 768 {tablet portrait}
//- tablet-ld = from 992 {tablet landscape}
//- desktop = from 1140 {desktop}
@mixin breakpoint($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @media #{inspect(map-get($breakpoints, $breakpoint))} {
      @content;
    }
  }
 
  @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        + "Available breakpoints are: #{map-keys($breakpoints)}.";
  }
}