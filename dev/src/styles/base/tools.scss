//- CUSTOM FUNTIONS:
//- convert px to rem
$browser-context: 16;
@function px2rem($pixels, $context: $browser-context) {
  @return ($pixels / $context) * 1rem;
}

//- CUSTOM MIXINS:
//- UI elements
@mixin UI-isValid {
  background: $c-valid url('~@/assets/images/svg/check.svg');
  background-position: center;
  background-repeat: no-repeat;
  background-size: 50% auto;
}

@mixin UI-isInvalid {
  background: $c-warning url('~@/assets/images/svg/error.svg');
  background-position: center;
  background-repeat: no-repeat;
  background-size: 50% auto;
}

@mixin UI-hamburger ($color, $active-color, $height) {
  background: $color;
  display: inline-block;
  width: 55%;
  height: #{$height + px};
  margin: 0 auto;
  position: relative;

  transition: background .4s $a-ease-out .8s;

  [class*='isMenuActive'] & {
    background: rgba( $active-color, 0 );
    transition-delay: .1s;
  }

  &::before,
  &::after {
    content: '';
    width: 80%;
    height: 100%;
    position: absolute;
    top: 0;
    left: 0;
    background: $color;

    transform-origin: 50% 50%;
    transition: background .4s $a-ease-out,
                top .4s $a-ease-out .8s,
                transform .4s $a-elastic .3s;

    [class*='isMenuActive'] & {
      background: $active-color;
      top: 0;
      transition-delay: 0s, 0s, .6s;
    }
  }

  &::before {
    top: #{(($height * 2) * -1px)};
    [class*='isMenuActive'] & {
      transform: rotate(45deg);
    }
  }

  &::after {
    top: #{($height * 2px)};
    [class*='isMenuActive'] & {
      transform: rotate(-45deg);
    }
  }
}

@mixin UI-base-rounded {
  background: $c-white;
  border-radius: #{$base + 2px};
  box-shadow: 0px 0px 10px 0px rgba(19,139,191,.1);
  border: 1px solid $c-silver;
}

//- typography mixins
@mixin text--light {
  font-family: $Quicksand, sans-serif;
  font-weight: $light;
}

@mixin text--regular {
  font-family: $Quicksand, sans-serif;
  font-weight: $regular;
}

@mixin text--bold {
  font-family: $Quicksand, sans-serif;
  font-weight: $bold;
}

@mixin text--big {
  font-size: px2rem(22);
}

@mixin text--xbig {
  font-size: px2rem(24);
}

@mixin text--xxbig {
  font-size: px2rem(34);
}

@mixin text--xxxbig {
  font-size: px2rem(38);
}

@mixin text--medium {
  font-size: px2rem(16);
}

@mixin text--small {
  font-size: px2rem(14);
}

@mixin text--xsmall {
  font-size: px2rem(12);
}

@mixin text--xxsmall {
  font-size: px2rem(10);
}


//- animations
@mixin moveUp {
  .change-move-leave,
  .change-move-enter-to {
    opacity: 1;
    transform: translateY(0)
  }

  .change-move-leave-active,
  .change-move-enter-active {
    transition: transform .8s $a-elastic,
                opacity .8s $a-ease-out;
  }

  .change-move-leave-active {
    transition-duration: .4s;
    transition-timing-function: $a-ease-in
  }

  .change-move-leave-to {
    opacity: 0;
    transform: translateY(25%);
  }

  .change-move-enter {
    opacity: 0;
    transform: translateY(100%)
  }
}

@mixin fade {
  .change-fade-leave,
  .change-fade-enter-to {
    opacity: 1;
    transform: translateY(0)
  }

  .change-fade-leave-active,
  .change-fade-enter-active {
    transition: transform .4s $a-ease-out,
                opacity .4s $a-ease-out;
  }

  .change-fade-leave-active {
    transition-duration: .2s;
    transition-timing-function: $a-ease-in
  }

  .change-fade-leave-to {
    opacity: 0;
  }

  .change-fade-enter {
    opacity: 0;
  }
}

@mixin moveValidationUI {
  .change-validation-leave,
  .change-validation-enter-to {
    opacity: 1;
    transform: translateX(-100%) translateX(#{$base * -1px})
  }

  .change-validation-leave-active,
  .change-validation-enter-active {
    transition: transform .4s $a-elastic,
                opacity .4s $a-ease-out,
                background .4s $a-ease-out;
  }

  .change-validation-leave-active {
    transition-duration: .4s;
    transition-timing-function: $a-ease-out
  }

  .change-validation-leave-to {
    opacity: 0;
    transform: translateX(-100%) translateX(#{($base * 2) * -1px});
  }

  .change-validation-enter {
    opacity: 0;
    transform: translateX(0)
  }
}

//- create media queries for columns use
@mixin build-mq($breakpoint, $min-or-max) {
  @if($breakpoint == 0) {
    @content;
  } @else {
    @media screen and (#{$min-or-max}-width: $breakpoint *1px) {
      @content;
    }
  }
}

//- grid create column class
@mixin build-col-classes($modifier, $grid-cols, $breakpoint) {
  @include build-mq($breakpoint, 'min') {
    &__col#{$modifier}-offset-0 {
      margin-left: 0;
    }
    @for $i from 1 through $grid-cols {
      &__col#{$modifier}-#{$i} {
        @if $i != 12 {
          flex: 0 0 calc((100 / #{$grid-cols / $i} * 1%) - #{(($base * 3) / 2) + px});
          @media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) {  
            flex-basis: calc((100% / #{$grid-cols / $i}) - #{(($base * 3) / 2) + px});
         }
        } @else {
          flex: 0 0 calc((100 / #{$grid-cols / $i} * 1%));
          @media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) {  
            flex-basis: calc((100% / #{$grid-cols / $i}));
         }
        }
      }

      &__col#{$modifier}-offset-right-#{$i} {
        margin-right: (100 / ($grid-cols / $i) ) * 1%;
      }

      &__col#{$modifier}-offset-left-#{$i} {
        margin-left: (100 / ($grid-cols / $i) ) * 1%;
      }
    }
  }
}

@each $modifier , $breakpoint in $map-grid-props {
  @if($modifier == '') {
    $modifier: '-xs';
  }
  @include build-mq($breakpoint - 1, 'max') {
    .hidden#{$modifier}-down {
      display: none !important;
    }
  }
  @include build-mq($breakpoint, 'min') {
    .hidden#{$modifier}-up {
      display: none !important;
    }
  }
}

//- generate breakpoints
//- @param breakpoint {string} :
//- only-phone = from 0 to 576 {mobile}
//- tablet-pt = from 768 {tablet portrait}
//- tablet-ld = from 992 {tablet landscape}
//- desktop = from 1140 {desktop}
@mixin breakpoint($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @media #{inspect(map-get($breakpoints, $breakpoint))} {
      @content;
    }
  }
 
  @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        + "Available breakpoints are: #{map-keys($breakpoints)}.";
  }
}